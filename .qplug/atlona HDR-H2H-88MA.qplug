-- Atlona HDR-H2H-88MA
-- adapted by Stuart Marks / AVL Systems
-- from Atlona AT-UHD-CLSO-840 Plugin
-- by Joe Peavey / QSC Boulder
-- December 2016
-- Modified by Caitlyn Sullivan / QSC Boulder July 2018

PluginInfo = 
{
  Name = "Atlona~HDR-H2H-88MA", 
  Version = "1.0",
  Id = "9c6306e9-c539-43d1-80c7-98a5c7390c05", -- Production
  --Id = "0ae88a28-118f-4e18-a588-3c0f7eee3d71", --Dev
  Description = "HDR-H2H-88MA Plugin",
  ShowDebug = false,
  Author = "SWM"
}

Source = {
  pretty = {"HDMI","HDMI","HDMI","HDMI","HDMI","HDMI","HDMI","HDMI"},
  cmd = {"HDMI","HDMI"},
}

local Color = {
  Atlona = { 255, 103, 27 },
  LtGray = { 153, 153, 153 },
  GrayTxt = { 102, 102, 102 },
}

function GetColor(props) return Color.Atlona end
function GetPrettyName(props) return "Atlona\rHDR-H2H-88MA" end

function GetProperties() -- No properties needed
    props = {}
  return props
end

function GetControls(props)
  ctls = {
    --[[{
      Name = "code",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Input",
      Count = 1
    },]]
    {
      Name = "power",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "panellock",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "connect",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "ip",
      ControlType = "Text",
      Count = 1,
    },
    {
      Name = "port",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 65535,
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "status",
      ControlType = "Indicator",
      IndicatorType = "Status",
      UserPin = true,
      PinStyle = "Output",
      Count = 1,
    },
  }
  for i=1,8 do -- HDCP
    table.insert(ctls,{
      Name = string.format("inhdcp%i",i),
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
      })
  end
  for out=1,8 do -- Outputs
    table.insert(ctls,{
      Name = string.format("outsel%i",out),
      ControlType = "Text",
      UserPin = true,
      PinStyle= "Both",
      Count = 1,
    })
    for inp=1,8 do -- Inputs
      table.insert(ctls,{
        Name = string.format("out%iin%i",out,inp),
        ControlType = "Button",
        ButtonType = "Trigger",
        UserPin = true,
        PinStyle = "Both",
        Count = 1,
      })
    end
  end
  return ctls
end

function GetControlLayout(props)
  layout = {
    --[[code = {
      PrettyName = "Code",
      Style = "Text",
      Position = {17,158},
      Size = {6,16},
      TextFontSize = 12,
    },]]
    power = {
      PrettyName = "Power",
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = Color.Atlona,
      OffColor = Color.LtGray,
      IsBold = true,
      UnlinkOffColor = true,
      Position = { 147, 144 },
      Size = { 52, 16 },
      Radius = 1,
      Margin = 1,
    },
    panellock =
    {
      PrettyName = "Panel Lock",
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = Color.Atlona,
      OffColor = Color.LtGray,
      IsBold = true,
      UnlinkOffColor = true,
      Position = { 304, 144 },
      Size = { 52, 16 },
      Radius = 1,
      Margin = 1,
    },
    connect = {
      PrettyName = "Connect",
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = Color.Atlona,
      OffColor = Color.LtGray,
      IsBold = true,
      UnlinkOffColor = true,
      Position = { 16, 98 },
      Size = { 89, 24 },
      Radius = 1,
      Margin = 1,
    },
    ip = {
      PrettyName = "IP Address",
      Style = "Text",
      Position = { 181, 63 },
      Size = { 94, 16 },
      TextFontSize = 12,
    },
    port =
    {
      PrettyName = "Port",
      Style = "Textbox",
      TextBoxStyle = "Meter",
      Position = { 311, 63 },
      Size = { 45, 16 },
    },
    status = {
      PrettyName = "Status",
      Style = "Text",
      Position = { 160, 98 },
      Size = { 196, 24 },
    },
  }
  for i=1,8 do
    local nice = string.format("%s %i",Source.pretty[i],i)
    layout[string.format("inhdcp%i",i)] = {
      PrettyName = string.format("HDCP~Input %i %s",i,Source.pretty[i]),
      Legend = nice,
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = Color.Atlona,
      OffColor = Color.LtGray,
      UnlinkOffColor = true,
      IsBold = true,
      Position = {14+(i-1)*43,611},
      Size = {42,16},
      Radius = 1,
      Margin = 1,
  }
  end
  for out=1,8 do
    layout[string.format("outsel%i",out)] = {
      PrettyName = string.format("Output %i~Input Select",out),
      Style = "ComboBox",
      Position = {305,146+(out*49)},
      Size = {51,16},
    }
    for inp=1,8 do
      local nice = string.format("%s %i",Source.pretty[inp],inp)
      layout[string.format("out%iin%i",out,inp)] = {
        PrettyName = string.format("Output %i~Input %i %s",out,inp,Source.pretty[inp]),
        Legend = nice,
        Style = "Button",
        ButtonStyle = "Trigger",
        Color = Color.Atlona,
        OffColor = Color.LtGray,
        UnlinkOffColor = true,
        IsBold = true,
        Position = {14+(inp-1)*43,164+(out*49)},
        Size = {42,16},
        Radius = 1,
        Margin = 1,
      }
    end
  end
	
  graphics =
  {
    { -- Overall GroupBox to give plugin a more "contained" look
      Type = "GroupBox",
      Fill = {255,255,255},
      CornerRadius = 8,
      StrokeWidth = 1,
      StrokeColor = {0,0,0},
      Position = {0,0},
      Size = {370,643}
    },
    {
      Type = "Svg", -- Atlona Logo
      Image = "",
      Position = { 9, 13 },
      Size = { 172, 32 }
    },
    {
      Type = "Text",
      Text = "HDR-H2H-88MA",
      Color = Color.Atlona,
      IsBold = true,
      Position = { 188, 9 },
      Size = { 176, 32 }
    },
    {
      Type = "Text",
      Text = "Plugin v"..PluginInfo.Version,
      Color = Color.Atlona,
      Font = "Roboto",
      FontSize = 8,
      FontStyle = "Italic",
      Position = { 188, 33 },
      Size = { 176, 19 }
    },
    {
      Type = "Text",
      Text = "Connect",
      Color = Color.GrayTxt,
      Position = { 16, 79 },
      Size = { 89, 19 }
    },
  }

  local Labels = {
    Text = {"IP Address","Port","Status","Power","Panel Lock"},
    Pos = {  X = {123,280,238,112,234},
             Y = {63,63,79,144,144}, },
    Size = { X = {58,31,37,35,70},
             Y = {16,16,18,15,16} } }

  for i=1,8 do
    table.insert(graphics,
      {
        Type = "Text",
        Text = "Source Selection",
        Color = Color.GrayTxt,
        HTextAlign = "Right",
        Position = {211,146+(i*49)},
        Size = {94,16}
      })
  end

  for i=1,#Labels.Pos.X do
    table.insert(graphics,
      {
        Type = "Text",
        Text = Labels.Text[i],
        Color = Color.GrayTxt,
        HTextAlign = "Right",
        Position = { Labels.Pos.X[i], Labels.Pos.Y[i] },
        Size = { Labels.Size.X[i], Labels.Size.Y[i] }
      })
  end

  local GrBox = {
    Text = {"Connection Settings","System Settings","Routing"},
    PosY = {56,137,170},
    SizeY = {78,30,465},
  }

  for i=1,#GrBox.PosY do
    table.insert(graphics,
      {
        Type = "GroupBox",
        Color = Color.LtGray,
        StrokeColor = Color.Atlona,
        Text = GrBox.Text[i],
        HTextAlign = "Left",
        StrokeWidth = 1,
        Radius = 4,
        Position = { 6, GrBox.PosY[i] },
        Size = { 358, GrBox.SizeY[i] }
      })
  end

  local Headers = {
    Text = {"Output 1","Output 2","Output 3","Output 4","Output 5","Output 6","Output 7","Output 8","Input HDCP Compliance"},
    PosY = {188,237,286,335,382,431,480,529,600},
  }

  for i=1,#Headers.PosY do
    table.insert(graphics,
    {
      Type = "Header",
      Text = Headers.Text[i],
      Color = {51,51,51},
      HTextAlign = "Center",
      TextFontSize = 12,
      Position = {14,Headers.PosY[i]},
      Size = {342,6},
    })
  end

  return layout , graphics
end

if Controls then
--Subtract 60 from error line number for actual error line number
-- Control Aliases
power = Controls.power
panellock = Controls.panellock
connect = Controls.connect
ip = Controls.ip 
port = Controls.port
status = Controls.status

-- Timers and Sockets
ATLONA = TcpSocket.New()
BufferTimer = Timer.New() 
StatusTimer = Timer.New()

-- Constants
local status_state = { OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5 }
local ignoreresp = {"Welcome to TELNET.","HDR-H2H-88MA"}
local Color = {
  Atlona = "#FF671B",
  LtGray = "#999999",
  GrayTxt = "#666666",
}
ATLONA.ReconnectTimeout = 5

-- Variables
local Buffer = ""
if ip.String=="" then port.Value=23 end

-- Helper Functions
function Status( msg, state )
  status.Value = status_state[state]
  status.String = msg
  if DebugDesc or (status_state[state]>0) then print( msg ) end
end

local function find(a,t) local f = false for _,_a in pairs(t) do f=a==_a if f then break end end return f end
local function findix(a,t) local f,ixout = false for ix,_a in pairs(t) do f=a==_a if f then ixout=ix break end end return ixout end
local function retonoff(ctl,ul)
  local state = "O"..(ctl.Boolean and "n" or "ff")
  print(ul~=nil and (string[ul=="u" and "upper" or ul=="l" and "lower"](state)) or state )
end

local function DebugFormat(string) -- Format strings containing non-printable characters so we can see what they are
  local visual = ""
  if type(string) == "string" then
    for i=1,#string do
      local byte = string:sub(i,i)
      if string.byte(byte) >= 32 and string.byte(byte) <= 126 then
        visual = visual..byte
      else
        visual = visual..string.format("[%02xh]",string.byte(byte))
      end
    end
  else
    visual = "Type is: "..type(string)
  end
  return visual
end

function ResponseBuffer(sock)
  local newrx = ATLONA:Read( ATLONA.BufferLength )
  Buffer=Buffer..newrx 
  BufferTimer:Start(0)
end

-------------------------
function InitChoices()
  Inputs = {}
  for i=1,8 do
    local inp = string.format(Source.pretty[i].." %i",i)
    table.insert(Inputs,inp)
  end
  for i=1,4 do
    local out = Controls[string.format("outsel%i",i)]
    out.Choices = Inputs
    if out.String=="" then out.String="Select" end
  end
end

local function SourceMutual(ctl)
  for k,v in pairs(Source.pretty) do
    local o = string.match(ctl,"out(%d)")
    local color = string.format("out%iin%i",o,k) == ctl and Color.Atlona or Color.LtGray
    Controls[string.format("out%iin%i",o,k)].Color = color 
  end
end
 
function CtlTableSetup()
  -- EventHandlers
  power.EventHandler = function() local state = power.Boolean and "ON" or "OFF" Send(string.format("PW%s",state)) end
  panellock.EventHandler = function() local l = panellock.Boolean and "Lock" or "Unlock" Send(l) end
  for out=1,8 do
    Controls[string.format("outsel%i",out)].EventHandler = function()
      for k,v in pairs(Source.pretty) do
        local c = Controls[string.format("outsel%i",out)].String
        p = string.match(c,"%d")
      end
      Send(string.format("x%iAVx%i",p,out))
      ctl = string.format("out%iin%i",out,p)
      SourceMutual(ctl)
    end
    for inp=1,8 do
      Controls[string.format("out%iin%i",out,inp)].EventHandler = function()
        ctl = string.format("out%iin%i",out,inp)
        SourceMutual(ctl)
        Controls[string.format("outsel%i",out)].String = Inputs[inp]
        Send(string.format("x%iAVx%i",inp,out))
      end
    end
  end
  for i=1,8 do
    Controls[string.format("inhdcp%i",i)].EventHandler = function()
      local h = Controls[string.format("inhdcp%i",i)].Boolean and "on" or "off"
      Send(string.format("HDCPSet%i %s",i,h))
    end
  end
end

function Send(cmd)
  if ATLONA.IsConnected then
    ATLONA:Write(cmd.."\r\n")
  end
end

function StatusGet()
  Send("PWSTA")
  for i=1,8 do
    Send(string.format("Status%i",i))
  end
  for i=1,8 do
    Send(string.format("HDCPSet%i sta",i))
  end
end

function ParseResponse(ATLONA)
  local BufRemove
  if Buffer:find("\r\n") then
    if Buffer:find("HDR-H2H-88MA") and startflag then
      StatusGet()
      StatusTimer:Start(30)
      startflag=false
    end
    for resp in Buffer:gmatch("([^\r\n]+)") do
      _,BufRemove = Buffer:find(resp.."\r\n")
      local chTable
      local rcmd,pName,value = resp:match("(%a)([^:]+):(.*)")
      if resp:find("^PW") then
        local p = tostring(resp:match("PW(.+)"))
        power.Boolean = p=="ON"
      elseif resp:find("^Lock") then
        panellock.Boolean=true
      elseif resp:find("^Unlock") then
        panellock.Boolean=false
      elseif resp:find("^x") then
        local inp,out = resp:match("x(%d)AVx(%d)")
        Controls[string.format("outsel%i",out)].String = Inputs[tonumber(inp)]
        local ctl = string.format("out%iin%i",out,inp)
        SourceMutual(ctl)
      elseif resp:find("^HDCPSet") then
        local inp = resp:match("HDCPSet(%d)")
        local bool = resp:find("on")
        Controls[string.format("inhdcp%i",tonumber(inp))].Boolean = bool
      elseif not find(resp,ignoreresp) then
        print("Unhandled:",resp)
      end
    end
    if BufRemove~=nil then Buffer = Buffer:sub(BufRemove+1) end
    if Buffer:find("!") and #Buffer==1 then Buffer="" end
    if #Buffer==0 then BufferTimer:Stop() end
  end
end

ATLONA.EventHandler = function( sock, evt, err )
  if evt == TcpSocket.Events.Connected then
    startflag = true
    Status( "Connected", "OK" )
    Send("Type")
    StatusGet()
    Send(panellock.Boolean and "Lock" or "Unlock")
    Send("Broadcast on")
    Send("IPTimeout 120")
  elseif evt == TcpSocket.Events.Reconnect then
    Status( "Reconnecting...", "INITIALIZING"  )
  elseif evt == TcpSocket.Events.Data then
    ResponseBuffer(sock)
  elseif evt == TcpSocket.Events.Closed then
    Status( "Connection closed by remote", "FAULT" )
  elseif evt == TcpSocket.Events.Error then
    Status( "Connection closed due to error: "..err, "FAULT" )
  elseif evt == TcpSocket.Events.Timeout then
    Status( "Connection closed due to timeout", "FAULT" )
  end
end

-- TCP Socket Functions
function Connect()
  if connect.Boolean then
    if ATLONA.IsConnected then ATLONA:Disconnect() end
    Status("Connecting...", "INITIALIZING")
    ATLONA:Connect(ip.String,port.Value)
  else
    ATLONA:Disconnect() 
    Status( "Disconnected", "OK" )
  end
end

function Init()
  BufferTimer.EventHandler = ParseResponse
  StatusTimer.EventHandler = StatusGet
  CtlTableSetup()
  InitChoices()
  connect.EventHandler = Connect
  ip.EventHandler = Connect
  port.EventHandler = Connect
  Connect()
end

Init()

end