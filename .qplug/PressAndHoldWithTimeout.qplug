-- Plugin based on template by Lightware Devices by Solo Works London
--Clint Vigil clint.vigil@gmail.com
-- Built in Lua
-- For template source, contact https://soloworks.co.uk

PluginInfo = {
    Name = "Press and Hold With Timeout", -- The tilde here indicates folder structure in the Shematic Elements pane
    Version = "0.0.1-Timeout",
    Id = "q-sys.community.custom.PressAndHoldTimeout", -- show this is just a unique id. Show some commented out 'fun' unique ids
    Description = "Press and Hold with Event on Time Expired",
    ShowDebug = true,
    Author = "Solo Works London"
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = { White = {255, 255, 255}, Black = {0, 0, 0}, Red = {255, 0, 0}, Green = {0, 255, 0}, MidnightBlue = {16,45,143},
    Marron = {167,43,37}, LtGreen = {1,190,122}, Gray = {156,160,150}, Cream = {235,237,224}, LtBlue = {0,168,236}, DkBlue = {2,47,85}, 
    Red6 = {169,0,23}, Orange8 = {220,144,0}, Green6 = {0,120,43}, Violet9 = {61,16,123}, Yellow10 = {250,245,25} , Red4 = {130,0,16}}
-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
    props = {
        { Name = "Hold Time", Type = "string", Value = "3.000" },
    }
    return props
end
-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
    return props
end
-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
    ctls = {
        { Name = "InputButtons", ControlType = "Button", ButtonType = "Momentary", PinStyle = "Input", Count = 16, UserPin = true },
        { Name = "QuickRelease", ControlType = "Button", ButtonType = "Trigger", PinStyle = "Output", Count = 16, UserPin = true },
        { Name = "HoldExpired", ControlType = "Button", ButtonType = "Trigger", PinStyle = "Output", Count = 16, UserPin = true }
    }
    return ctls
end

local pagenames = {"Controls"}
function GetPages(props)
    pages = {}
    for ix,name in ipairs(pagenames) do
        table.insert(pages, {name = pagenames[ix]})
    end
    return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
  -- layout holds representaiton of Controls
  local layout = {}
  -- graphics holds aesthetic & design items
  local graphics = {}
  -- ctl_str is a helper string to get around system not indexing single value as [1]
  --local ctl_str = tostring(props["SomeValue"].Value == 1 and "" or " " .. PageIndex)
  -- x,y allows an easy method of knowing where you are relative to the section being designed
  local CurrentPage = pagenames[props["page_index"].Value]

  local lg_btn = {45,45}
  local x, y = 0, 0

  if CurrentPage=="Controls" then
    -- Graphics Section
    local row_size = 16
    table.insert( graphics, { Type = "GroupBox", Text = "Press and Hold Buttons", HTextAlign = "Left", Fill = Colors.White, CornerRadius = 8,
            StrokeColor = Colors.Black, StrokeWidth = 1, Position = {x, y}, Size = {720, 167} } )
    for i = 1, 16 do
        local row = math.floor((i-1)/row_size )+1
        local column = i-(row-1)*row_size
        layout["InputButtons " .. i] = { PrettyName = "Input Pin~" .. (i), Style = "Button", Color = Colors.LtBlue, UnlinkOffColor = true,
            OffColor = Colors.DkBlue, FontSize = 10, CornerRadius = 8, Legend = "Input Pin\r" .. (i),
            Position = {x + lg_btn[1]*(column-1), y + (2*lg_btn[2]*row)-lg_btn[2]-20}, Size = lg_btn }
        layout["QuickRelease " .. i] = { PrettyName = "Not Held~" .. (i), Style = "Button", Color = Colors.Red, FontSize = 10, CornerRadius = 8,
          Legend = "Not Held\r" .. (i), Position = {x + lg_btn[1]*(column-1), y + (2*lg_btn[2]*row) - 20}, Size = lg_btn }
        layout["HoldExpired " .. i] = { PrettyName = "Held~" .. (i), Style = "Button", Color = Colors.Red, FontSize = 10, CornerRadius = 8,
          Legend = "Held\r" .. (i), Position = {x + lg_btn[1]*(column-1), y + (3*lg_btn[2]*row) - 20}, Size = lg_btn }
    end
  end
  return layout, graphics
end

if Controls then
    TimerHeld = Timer.New()
    nHold = 0
    function fnPushHold ( ctrl )
        local ButtonNum = ctrl.Index - Controls["InputButtons"][1].Index + 1
        if ctrl.Boolean == true then
            print("Button " .. ButtonNum .. " pressed")
            nHold = ButtonNum
            TimerHeld:Start(Properties["Hold Time"].Value)
        else
            TimerHeld:Stop()
            if nHold ~= 0 then
                Controls["QuickRelease"][nHold]:Trigger()
                print("Button " .. nHold .. " quick released")
                nHold = 0
            end
        end
    end

    function fnHeld( cmd )
        if nHold ~= 0 then
            Controls["HoldExpired"][nHold]:Trigger()
            print("Button " .. nHold .. " hold time expired")
            nHold = 0
        end
    end

    TimerHeld.EventHandler = fnHeld

    for i = 1,16 do
        Controls["InputButtons"][i].EventHandler = fnPushHold
    end
end
